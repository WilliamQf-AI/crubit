// Part of the Crubit project, under the Apache License v2.0 with LLVM
// Exceptions. See /LICENSE for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

// Data structures for whole-codebase nullability inference.
//
// To accurately determine nullability of public APIs, we join information from
// many translation units (e.g. a function's implementation, and all callsites).
//
// In large codebases, we may distribute this process as a mapreduce:
// - process the many translation units in parallel, obtaining evidence
//   about all functions defined/called
// - group the evidence by the function it describes, and combine it to form
//   conclusions for each one
//
// Key data structures are the evidence from one TU (map output/reduce input),
// and the conclusions (reduce output).
syntax = "proto2";

package clang.tidy.nullability;

// A symbol whose nullability should potentially be inferred.
message Symbol {
  // Clang "Unified Symbol Resolution" identifier for the symbol.
  optional string usr = 1;
}

// A "slot" identifies a position in a symbol's type that may have nullability.
// For now, the symbols in question are assumed to be functions, and we only
// support describing direct nullability of pointer params and return values.
//
// We use uint32 rather than the Slot type to represent slot numbers in protos.
// (A symbol may have any number of slots, and proto2 enums are closed).
// The Slot enum just defines well-known slot values.
enum Slot {
  // The slot number for a function's return type.
  SLOT_RETURN_TYPE = 0;
  // The slot number for a function's first parameter.
  // The second param is SLOT_PARAM + 1, etc.
  SLOT_PARAM = 1;
}

// An observation of nullability based on local analysis (e.g. a function body).
// Evidence from across different functions/TUs is combined to form conclusions.
message Evidence {
  optional Symbol symbol = 1;
  optional uint32 slot = 2;
  optional Kind kind = 3;
  // Source location: file:line:col. Optional, for debugging only.
  optional string location = 4;

  // A pattern in the code that might help us determine nullability.
  enum Kind {
    // The declaration was annotated with _Null_unspecified or similar.
    ANNOTATED_UNKNOWN = 0;
    // The declaration was annotated with _Nullable or similar.
    ANNOTATED_NULLABLE = 1;
    // The declaration was annotated with _Nonnull or similar.
    ANNOTATED_NONNULL = 2;

    // A pointer was dereferenced without being checked for null first.
    UNCHECKED_DEREFERENCE = 3;
  }
}

// A conclusion about nullability based on global analysis (e.g. all TUs).
message Inference {
  optional Symbol symbol = 1;

  repeated SlotInference slot_inference = 2;
  message SlotInference {
    optional uint32 slot = 1;
    optional Nullability nullability = 2;
    // Indicates that not we could not reconcile all evidence into a conclusion.
    // e.g. a Nullable<int*> parameter that was unconditionally dereferenced.
    optional bool conflict = 3;
    // Examples of evidence that contributed. Optional, for debugging only.
    repeated Evidence sample_evidence = 4;
  }

  enum Nullability {
    UNKNOWN = 0;
    NONNULL = 1;
    NULLABLE = 2;
  }
}

// Summary of an incomplete set of Evidence for a symbol.
// Once all evidence has been incorporated, can be finalized into Inference.
// This type should be treated as opaque, and its serialization is not stable.
message Partial {
  optional Symbol symbol = 1;

  // Return type is slot[0], first param is slot[1]...
  repeated SlotPartial slot = 2;
  message SlotPartial {
    map</*Kind*/ uint32, uint32> kind_count = 1;
    map</*Kind*/ uint32, SampleLocations> kind_samples = 2;
  }
  message SampleLocations {
    // A bounded number of locations are stored.
    repeated string location = 1;
  }
}
